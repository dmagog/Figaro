from .celery_worker import celery_app
import os
from dotenv import load_dotenv
import asyncio
from bot.utils import send_telegram_message as tg_send
from celery.utils.log import get_task_logger
from datetime import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append("/app")

load_dotenv()
logger = get_task_logger(__name__)

@celery_app.task(bind=True, max_retries=3, default_retry_delay=10)
def send_telegram_message(self, telegram_id: int, text: str = None, file_path: str = None, file_type: str = None, parse_mode: str = None, message_id: int = None):
    logger.info(f"[Celery] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {text} (file: {file_path}, type: {file_type}, parse_mode: {parse_mode}, message_id: {message_id})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if message_id:
        try:
            from sqlmodel import Session, select
            from app.models import TelegramMessage, MessageStatus
            from app.database.simple_engine import simple_engine
            
            with Session(simple_engine) as session:
                message = session.get(TelegramMessage, message_id)
                if message:
                    message.status = MessageStatus.SENT
                    message.sent_at = datetime.utcnow()
                    session.add(message)
                    session.commit()
        except Exception as e:
            logger.error(f"[Celery] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
    
    try:
        result = asyncio.run(tg_send(telegram_id, text, file_path, file_type, parse_mode))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        if message_id and result:
            try:
                from sqlmodel import Session
                from app.models import TelegramMessage, MessageStatus
                from app.database.simple_engine import simple_engine
                
                with Session(simple_engine) as session:
                    message = session.get(TelegramMessage, message_id)
                    if message:
                        message.status = MessageStatus.DELIVERED
                        message.delivered_at = datetime.utcnow()
                        session.add(message)
                        session.commit()
            except Exception as e:
                logger.error(f"[Celery] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ {message_id}: {e}")
        
        return result
    except Exception as e:
        logger.error(f"[Celery] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
        if message_id:
            try:
                from sqlmodel import Session
                from app.models import TelegramMessage, MessageStatus
                from app.database.simple_engine import simple_engine
                
                with Session(simple_engine) as session:
                    message = session.get(TelegramMessage, message_id)
                    if message:
                        message.status = MessageStatus.FAILED
                        message.error_message = str(e)
                        session.add(message)
                        session.commit()
            except Exception as db_error:
                logger.error(f"[Celery] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—à–∏–±–∫–∏ {message_id}: {db_error}")
        
        # Retry –ø—Ä–∏ –æ—à–∏–±–∫–µ 429 –∏–ª–∏ –ª—é–±–æ–π Exception
        if hasattr(e, 'response') and getattr(e.response, 'status', None) == 429:
            logger.warning("429 Too Many Requests: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            raise self.retry(exc=e, countdown=30)
        raise self.retry(exc=e)

@celery_app.task(bind=True, max_retries=3, default_retry_delay=10)
def get_user_route_data_task(self, user_external_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Celery"""
    logger.info(f"[Celery] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_external_id}")
    
    try:
        from app.services.crud.purchase import get_user_unique_concerts_with_details
        from app.routes.user.temp_routes import calculate_transition_time, calculate_route_statistics
        from sqlmodel import Session
        from app.database.simple_engine import simple_engine
        
        with Session(simple_engine) as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            concerts_data = get_user_unique_concerts_with_details(session, user_external_id)
            
            if not concerts_data:
                return {"error": "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ"}
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_concerts = sorted(concerts_data, key=lambda x: x['concert'].get('datetime', datetime.min))
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            concerts_by_day_with_transitions = {}
            current_day = None
            day_concerts = []
            
            for i, concert_data in enumerate(sorted_concerts):
                concert = concert_data['concert']
                if concert.get('datetime'):
                    day = concert['datetime'].date()
                    if current_day != day:
                        if current_day and day_concerts:
                            concerts_by_day_with_transitions[current_day] = day_concerts
                        current_day = day
                        day_concerts = []
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
                    concert_with_transition = concert_data.copy()
                    if i < len(sorted_concerts) - 1:
                        next_concert_data = sorted_concerts[i + 1]
                        transition_info = calculate_transition_time(session, concert_data, next_concert_data)
                        concert_with_transition['transition_info'] = transition_info
                    else:
                        concert_with_transition['transition_info'] = None
                    
                    day_concerts.append(concert_with_transition)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            if current_day and day_concerts:
                concerts_by_day_with_transitions[current_day] = day_concerts
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            route_stats = calculate_route_statistics(session, sorted_concerts, concerts_by_day_with_transitions)
            
            return {
                "sorted_concerts": sorted_concerts,
                "route_summary": route_stats,
                "concerts_by_day": concerts_by_day_with_transitions
            }
            
    except Exception as e:
        logger.error(f"[Celery] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise self.retry(exc=e)

@celery_app.task(bind=True, max_retries=3, default_retry_delay=10)
def format_route_concerts_list_task(self, concerts_data: dict, detailed: bool = False, day_number: int = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Celery"""
    logger.info(f"[Celery] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (detailed: {detailed}, day: {day_number})")
    
    try:
        sorted_concerts = concerts_data.get("sorted_concerts", [])
        if not sorted_concerts:
            return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–Ω—è–º
        concerts_by_day = {}
        for i, concert_data in enumerate(sorted_concerts):
            concert = concert_data['concert']
            if concert.get('datetime'):
                day = concert['datetime'].date()
                if day not in concerts_by_day:
                    concerts_by_day[day] = []
                concerts_by_day[day].append({
                    'index': i + 1,
                    'time': concert['datetime'].strftime("%H:%M"),
                    'name': concert.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'hall': concert.get('hall', {}).get('name', '–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω'),
                    'duration': str(concert.get('duration', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
                    'genre': concert.get('genre', '–ñ–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'),
                    'concert_data': concert_data
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        sorted_days = sorted(concerts_by_day.keys())
        
        if day_number:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            try:
                day_index = int(day_number) - 1
                if 0 <= day_index < len(sorted_days):
                    target_day = sorted_days[day_index]
                    day_concerts = concerts_by_day[target_day]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    day_str = str(target_day.day)
                    month_names = {
                        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                    }
                    month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
                    
                    concerts_text = f"üéà *–î–µ–Ω—å {day_index + 1}* ({day_str} {month_str})\n\n"
                    
                    for concert in day_concerts:
                        if detailed:
                            concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                            concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                            
                            if concert['concert_data'].get('transition_info'):
                                transition = concert['concert_data']['transition_info']
                                if transition.get('status') == 'success':
                                    concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                                elif transition.get('status') == 'same_hall':
                                    concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                            
                            concerts_text += "\n"
                        else:
                            concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    
                    return concerts_text
                else:
                    return f"–î–µ–Ω—å {day_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ"
            except ValueError:
                return f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è: {day_number}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
        concerts_text = ""
        for day_index, target_day in enumerate(sorted_days, 1):
            day_concerts = concerts_by_day[target_day]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            day_str = str(target_day.day)
            month_names = {
                1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
            }
            month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
            
            concerts_text += f"üéà *–î–µ–Ω—å {day_index}* ({day_str} {month_str})\n\n"
            
            for concert in day_concerts:
                if detailed:
                    concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                    
                    if concert['concert_data'].get('transition_info'):
                        transition = concert['concert_data']['transition_info']
                        if transition.get('status') == 'success':
                            concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                        elif transition.get('status') == 'same_hall':
                            concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                    
                    concerts_text += "\n"
                else:
                    concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
            
            concerts_text += "\n"
        
        return concerts_text.strip()
        
    except Exception as e:
        logger.error(f"[Celery] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        raise self.retry(exc=e)

@celery_app.task(bind=True, max_retries=3, default_retry_delay=10)
def format_route_summary_task(self, concerts_data: dict):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ Celery"""
    logger.info(f"[Celery] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
    
    try:
        route_summary = concerts_data.get("route_summary", {})
        if not route_summary:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        summary_text = "üìä *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        summary_text += f"üéµ *–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {route_summary.get('total_concerts', 0)}\n"
        summary_text += f"üìÖ *–î–Ω–µ–π:* {route_summary.get('total_days', 0)}\n"
        summary_text += f"üèõÔ∏è *–ó–∞–ª–æ–≤:* {route_summary.get('total_halls', 0)}\n"
        summary_text += f"üé® *–ñ–∞–Ω—Ä–æ–≤:* {route_summary.get('total_genres', 0)}\n"
        
        # –í—Ä–µ–º—è
        concert_time = route_summary.get('total_concert_time_minutes', 0)
        if concert_time:
            summary_text += f"‚è±Ô∏è *–í—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {concert_time} –º–∏–Ω\n"
        
        trans_time = route_summary.get('total_walk_time_minutes', 0)
        if trans_time:
            summary_text += f"üö∂ *–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* {trans_time} –º–∏–Ω\n"
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = route_summary.get('total_distance_km', 0)
        if distance:
            summary_text += f"üìç *–ü—Ä–æ–π–¥–µ–Ω–æ:* {distance} –∫–º\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        compositions = route_summary.get('unique_compositions', 0)
        if compositions:
            summary_text += f"üéº *–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:* {compositions}\n"
        
        authors = route_summary.get('unique_authors', 0)
        if authors:
            summary_text += f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä–æ–≤:* {authors}\n"
        
        artists = route_summary.get('unique_artists', 0)
        if artists:
            summary_text += f"üé≠ *–ê—Ä—Ç–∏—Å—Ç–æ–≤:* {artists}\n"
        
        summary_text += "\nüéâ *–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Ñ–µ—Å—Ç–∏–≤–∞–ª—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö!*"
        
        return summary_text
        
    except Exception as e:
        logger.error(f"[Celery] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise self.retry(exc=e) 