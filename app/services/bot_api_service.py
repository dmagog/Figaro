from sqlmodel import Session, select
from models import User, MessageTemplate
from app.services.telegram_service import TelegramService
from worker.tasks import send_telegram_message
import logging

logger = logging.getLogger(__name__)

class BotApiService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram –±–æ—Ç–∞"""
    
    @staticmethod
    def send_template_message(telegram_id: int, template_id: int, session: Session):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É —á–µ—Ä–µ–∑ Celery"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.exec(select(User).where(User.telegram_id == telegram_id)).first()
            if not user:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "code": 404}
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = session.get(MessageTemplate, template_id)
            if not template:
                return {"error": "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", "code": 404}
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_data = TelegramService.get_user_data(user, session)
            personalized_message = TelegramService.personalize_message(template.content, user_data)
            
            # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Celery
            task = send_telegram_message.delay(
                telegram_id, 
                personalized_message, 
                None,  # file_path
                None,  # file_type
                "Markdown"
            )
            
            logger.info(f"Bot API: Task queued {task.id} for user {telegram_id}")
            
            return {
                "success": True, 
                "task_id": task.id,
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å"
            }
            
        except Exception as e:
            logger.error(f"Bot API Error: {e}", exc_info=True)
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}", "code": 500}
    
    @staticmethod
    def get_route_data(telegram_id: int, session: Session):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.exec(select(User).where(User.telegram_id == telegram_id)).first()
            if not user:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "code": 404}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ TelegramService
            user_data = TelegramService.get_user_data(user, session)
            
            return {
                "success": True,
                "route_data": {
                    "sorted_concerts": user_data.get("sorted_concerts", []),
                    "route_summary": user_data.get("route_summary", {}),
                    "route_concerts": user_data.get("route_concerts", [])
                },
                "user_name": user.name or user.email.split('@')[0] if user.email else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
            
        except Exception as e:
            logger.error(f"Bot API Route Error: {e}", exc_info=True)
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}", "code": 500}
    
    @staticmethod
    def get_route_day(telegram_id: int, day_number: int, session: Session):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.exec(select(User).where(User.telegram_id == telegram_id)).first()
            if not user:
                return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "code": 404}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
            user_data = TelegramService.get_user_data(user, session)
            route_data = {
                "sorted_concerts": user_data.get("sorted_concerts", []),
                "route_summary": user_data.get("route_summary", {}),
                "route_concerts": user_data.get("route_concerts", [])
            }
            
            logger.info(f"Route data for day {day_number}: {len(route_data.get('sorted_concerts', []))} concerts")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–µ—Å—å
            formatted_route = BotApiService._format_route_concerts_list(route_data, detailed=True, day_number=str(day_number))
            
            return {
                "success": True,
                "day_number": day_number,
                "formatted_route": formatted_route,
                "user_name": user.name or user.email.split('@')[0] if user.email else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }
            
        except Exception as e:
            logger.error(f"Bot API Route Day Error: {e}", exc_info=True)
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –¥–µ–Ω—å: {str(e)}", "code": 500}
    
    @staticmethod
    def _format_route_concerts_list(concerts_data, detailed=False, day_number=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            sorted_concerts = concerts_data.get("sorted_concerts", [])
            logger.info(f"Formatting route: {len(sorted_concerts)} concerts, day_number={day_number}")
            
            if not sorted_concerts:
                return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–Ω—è–º
            concerts_by_day = {}
            processed_concerts = 0
            for i, concert_data in enumerate(sorted_concerts):
                concert = concert_data['concert']
                if concert.get('datetime'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ datetime —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                    if isinstance(concert['datetime'], str):
                        from datetime import datetime
                        try:
                            dt = datetime.fromisoformat(concert['datetime'].replace('Z', '+00:00'))
                        except Exception as e:
                            logger.warning(f"Failed to parse datetime '{concert['datetime']}': {e}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç
                            continue
                    else:
                        dt = concert['datetime']
                    
                    day = dt.date()
                    if day not in concerts_by_day:
                        concerts_by_day[day] = []
                    concerts_by_day[day].append({
                        'index': i + 1,
                        'time': dt.strftime("%H:%M"),
                        'name': concert.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                        'hall': concert.get('hall', {}).get('name', '–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω'),
                        'duration': str(concert.get('duration', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
                        'genre': concert.get('genre', '–ñ–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'),
                        'concert_data': concert_data
                    })
                    processed_concerts += 1
            
            logger.info(f"Processed {processed_concerts} concerts, grouped into {len(concerts_by_day)} days")
            logger.info(f"Available days: {sorted(concerts_by_day.keys())}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
            sorted_days = sorted(concerts_by_day.keys())
            
            if day_number:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
                try:
                    day_index = int(day_number) - 1
                    if 0 <= day_index < len(sorted_days):
                        target_day = sorted_days[day_index]
                        day_concerts = concerts_by_day[target_day]
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                        day_str = str(target_day.day)
                        month_names = {
                            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                            5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                            9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                        }
                        month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
                        
                        concerts_text = f"üéà *–î–µ–Ω—å {day_index + 1}* ({day_str} {month_str})\n\n"
                        
                        for concert in day_concerts:
                            if detailed:
                                concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                                concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                                
                                if concert['concert_data'].get('transition_info'):
                                    transition = concert['concert_data']['transition_info']
                                    if transition.get('status') == 'success':
                                        concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                                    elif transition.get('status') == 'same_hall':
                                        concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                                
                                concerts_text += "\n"
                            else:
                                concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
                        
                        return concerts_text
                    else:
                        return f"–î–µ–Ω—å {day_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ"
                except ValueError:
                    return f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è: {day_number}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
            concerts_text = ""
            for day_index, target_day in enumerate(sorted_days, 1):
                day_concerts = concerts_by_day[target_day]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                day_str = str(target_day.day)
                month_names = {
                    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                }
                month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
                
                concerts_text += f"üéà *–î–µ–Ω—å {day_index}* ({day_str} {month_str})\n\n"
                
                for concert in day_concerts:
                    if detailed:
                        concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                        concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                        
                        if concert['concert_data'].get('transition_info'):
                            transition = concert['concert_data']['transition_info']
                            if transition.get('status') == 'success':
                                concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                            elif transition.get('status') == 'same_hall':
                                concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                        
                        concerts_text += "\n"
                    else:
                        concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
                
                concerts_text += "\n"
            
            return concerts_text
            
        except Exception as e:
            logger.error(f"Error formatting route concerts: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}" 