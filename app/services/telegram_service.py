import json
import re
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Any
from sqlmodel import Session, select
from models import User, MessageTemplate, TelegramMessage, TelegramCampaign, MessageStatus, Purchase
from worker.tasks import send_telegram_message
import logging

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    DEFAULT_TEMPLATES = [
        {
            "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "content": "–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª—è '–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏'! üéµ\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π.",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}'
        },
        {
            "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ",
            "content": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ!\n\n{concert_name}\n–î–∞—Ç–∞: {concert_date}\n–ó–∞–ª: {hall_name}\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –±–∏–ª–µ—Ç–∞—Ö!",
            "variables": '{"concert_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "concert_date": "–î–∞—Ç–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "hall_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞"}'
        },
        {
            "name": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "content": "üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å, {name}!\n\n{offer_text}\n\n–£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ {expiry_date}!",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "offer_text": "–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "expiry_date": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"}'
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫",
            "content": "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:\n\nüé´ –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {tickets_count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_spent} ‚ÇΩ\nüéµ –ü–æ—Å–µ—â–µ–Ω–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤: {concerts_count}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è!",
            "variables": '{"tickets_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤", "total_spent": "–û–±—â–∞—è —Å—É–º–º–∞", "concerts_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤"}'
        },
        {
            "name": "–í–∞—à –º–∞—Ä—à—Ä—É—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤",
            "content": "üéµ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è, {name}!**\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:**\nüé´ –ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤: **{route_concerts_count}**\nüìÖ –î–Ω–µ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—è: **{route_days}**\nüèõÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ª–æ–≤: **{route_halls}**\nüé≠ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤: **{route_genres}**\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤: **{route_show_time} –º–∏–Ω**\n\nüéº **–í–∞—à–∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã:**\n\n{route_concerts_list}\n\n–£–¥–∞—á–Ω–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è! üéâ",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "route_concerts_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ", "route_days": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π", "route_halls": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ª–æ–≤", "route_genres": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–Ω—Ä–æ–≤", "route_show_time": "–í—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ (–º–∏–Ω)", "route_trans_time": "–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (–º–∏–Ω)", "route_wait_time": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–º–∏–Ω)", "route_comfort_score": "–û—Ü–µ–Ω–∫–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞", "route_intellect_score": "–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", "route_concerts_list": "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤"}'
        },
        {
            "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏",
            "content": "üéµ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ ‚Ññ{concert_position:1}, {name}!\n\nüéº {next_concert_name}\nüìÖ –î–∞—Ç–∞: {next_concert_date}\nüïê –í—Ä–µ–º—è: {next_concert_time}\nüèõÔ∏è –ó–∞–ª: {next_concert_hall}\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_concert_duration}\n\nüé≠ –ê—Ä—Ç–∏—Å—Ç—ã:\n{next_concert_artists}\n\nüéº –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:\n{next_concert_compositions}\n\n–£–¥–∞—á–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞! üéâ",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "concert_position:N": "–ù–æ–º–µ—Ä –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: {concert_position:1} –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞)", "next_concert_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "next_concert_date": "–î–∞—Ç–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "next_concert_time": "–í—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "next_concert_hall": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞", "next_concert_duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "next_concert_artists": "–°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤", "next_concert_compositions": "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Ä–∞–º–∏"}'
        }
    ]
    
    @staticmethod
    def get_user_data(user: User, session: Session) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        data = {
            "id": user.id,
            "name": user.name or user.email.split('@')[0] if user.email else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "email": user.email,
            "telegram_id": user.telegram_id,
            "telegram_username": user.telegram_username,
            "created_at": user.created_at,
            "tickets_count": 0,
            "total_spent": 0,
            "concerts_count": 0,
            "last_purchase": None,
            "route_concerts": [],
            "route_summary": {},
            "concerts_for_template": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
        if user.external_id:
            purchases = session.exec(
                select(Purchase).where(Purchase.user_external_id == str(user.external_id))
            ).all()
            
            if purchases:
                data["tickets_count"] = len(purchases)
                data["total_spent"] = sum(p.price or 0 for p in purchases)
                data["concerts_count"] = len(set(p.concert_id for p in purchases))
                data["last_purchase"] = max(p.purchased_at for p in purchases if p.purchased_at)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            try:
                from app.services.crud.purchase import get_user_unique_concerts_with_details
                from app.routes.user.temp_routes import calculate_transition_time
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                concerts_data = get_user_unique_concerts_with_details(session, str(user.external_id))
                
                if concerts_data:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
                    sorted_concerts = sorted(
                        concerts_data, 
                        key=lambda x: x['concert'].get('datetime') if x['concert'].get('datetime') else datetime.min
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤
                    flat_concerts = []
                    flat_concerts_for_template = []
                    
                    for i, concert_data in enumerate(sorted_concerts):
                        concert = concert_data['concert']
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: —á–∏—Å–ª–æ + –º–µ—Å—è—Ü –ø—Ä–æ–ø–∏—Å—å—é
                        date_str = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        if concert.get('datetime'):
                            month_names = {
                                1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                                5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                                9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                            }
                            day = concert['datetime'].day
                            month = month_names.get(concert['datetime'].month, "–º–µ—Å—è—Ü–∞")
                            date_str = f"{day} {month}"
                        
                        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è route_concerts
                        flat_concerts.append({
                            "id": concert.get('id'),
                            "name": concert.get('name') or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                            "date": date_str,
                            "time": concert['datetime'].strftime("%H:%M") if concert.get('datetime') else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                            "hall": concert.get('hall', {}).get('name') if concert.get('hall') else "–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω",
                            "duration": str(concert.get('duration')) if concert.get('duration') else "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                            "day_index": i + 1  # –ü—Ä–æ—Å—Ç–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
                        })
                        
                        # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è concerts_for_template
                        flat_concerts_for_template.append(concert_data)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–≤–æ–¥–∫—É
                    route_summary = {
                        "total_concerts": len(flat_concerts),
                        "total_days": len(set(c['concert'].get('datetime', datetime.min).date() for c in sorted_concerts if c['concert'].get('datetime'))),
                        "total_halls": len(set(c['concert'].get('hall', {}).get('id') for c in sorted_concerts if c['concert'].get('hall'))),
                        "total_genres": len(set(c['concert'].get('genre') for c in sorted_concerts if c['concert'].get('genre'))),
                        "show_time": 0,
                        "trans_time": 0,
                        "wait_time": 0,
                        "comfort_score": 0,
                        "intellect_score": 0
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞
                    for i, concert_data in enumerate(sorted_concerts):
                        if i < len(sorted_concerts) - 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç
                            next_concert_data = sorted_concerts[i + 1]
                            transition_info = calculate_transition_time(session, concert_data, next_concert_data)
                            flat_concerts_for_template[i]['transition_info'] = transition_info
                        else:
                            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –Ω–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
                            flat_concerts_for_template[i]['transition_info'] = None
                    
                    data["route_concerts"] = flat_concerts
                    data["concerts_for_template"] = flat_concerts_for_template
                    data["route_summary"] = route_summary
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        
        return data
    
    @staticmethod
    def personalize_message(template: str, user_data: Dict[str, Any]) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
            personalized = template
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            replacements = {
                "{name}": user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                "{email}": user_data.get("email", ""),
                "{telegram_username}": user_data.get("telegram_username", ""),
                "{tickets_count}": str(user_data.get("tickets_count", 0)),
                "{total_spent}": str(user_data.get("total_spent", 0)),
                "{concerts_count}": str(user_data.get("concerts_count", 0)),
                "{user_id}": str(user_data.get("id", "")),
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤
                "{concert_name}": user_data.get("concert_name", "–ö–æ–Ω—Ü–µ—Ä—Ç"),
                "{concert_id}": str(user_data.get("concert_id", "")),
                "{concert_date}": user_data.get("concert_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                "{hall_name}": user_data.get("hall_name", "–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"),
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                "{offer_text}": user_data.get("offer_text", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                "{expiry_date}": user_data.get("expiry_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
                "{route_concerts_count}": str(user_data.get("route_summary", {}).get("total_concerts", 0)),
                "{route_days}": str(user_data.get("route_summary", {}).get("total_days", 0)),
                "{route_halls}": str(user_data.get("route_summary", {}).get("total_halls", 0)),
                "{route_show_time}": str(user_data.get("route_summary", {}).get("show_time", 0)),
                "{route_trans_time}": str(user_data.get("route_summary", {}).get("trans_time", 0)),
                "{route_wait_time}": str(user_data.get("route_summary", {}).get("wait_time", 0)),
                "{route_comfort_score}": str(user_data.get("route_summary", {}).get("comfort_score", 0)),
                "{route_intellect_score}": str(user_data.get("route_summary", {}).get("intellect_score", 0)),
                "{route_genres}": str(user_data.get("route_summary", {}).get("total_genres", 0)),
            }
            
            for placeholder, value in replacements.items():
                personalized = personalized.replace(placeholder, value)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
            if "{route_concerts_list}" in personalized:
                route_concerts = user_data.get("route_concerts", [])
                if route_concerts:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–Ω—è–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
                    concerts_by_day = {}
                    for concert in route_concerts:
                        day_index = concert['day_index']
                        if day_index not in concerts_by_day:
                            concerts_by_day[day_index] = []
                        concerts_by_day[day_index].append(concert)
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è
                    sorted_days = sorted(concerts_by_day.keys())
                    
                    concerts_text = ""
                    
                    for day_index in sorted_days:
                        day_concerts = concerts_by_day[day_index]
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –≤ –¥–Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        day_concerts.sort(key=lambda x: x['time'])
                        
                        # –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞ –¥–Ω—è
                        day_date = day_concerts[0]['date'] if day_concerts else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                        
                        concerts_text += f"üéà *–î–µ–Ω—å {day_index}* ({day_date})\n"
                        concerts_text += " " * 20 + "\n"
                        
                        for i, concert in enumerate(day_concerts, 1):
                            concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['id']}. {concert['name']}\n"
                        
                        concerts_text += "\n\n"
                    
                    personalized = personalized.replace("{route_concerts_list}", concerts_text.strip())
                else:
                    personalized = personalized.replace("{route_concerts_list}", "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è concert_position —Å –Ω–æ–º–µ—Ä–æ–º
            import re
            concert_position_pattern = r'\{concert_position:(\d+)\}'
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –¥–ª—è concert_position
            concert_replacements_to_apply = {}
            
            for match in re.finditer(concert_position_pattern, personalized):
                position = int(match.group(1))
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                route_concerts = user_data.get("route_concerts", [])
                concerts_for_template = user_data.get("concerts_for_template", [])
                
                if 1 <= position <= len(route_concerts):
                    concert_index = position - 1
                    concert = route_concerts[concert_index]
                    concert_data = concerts_for_template[concert_index] if concert_index < len(concerts_for_template) else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤
                    artists = []
                    if concert_data and 'concert' in concert_data and 'artists' in concert_data['concert']:
                        for artist in concert_data['concert']['artists']:
                            artists.append(artist.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç'))
                    artists_text = "\n".join(artists) if artists else "–ê—Ä—Ç–∏—Å—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∞–º–∏
                    compositions = []
                    if concert_data and 'concert' in concert_data and 'compositions' in concert_data['concert']:
                        for comp in concert_data['concert']['compositions']:
                            comp_name = comp.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
                            author_name = comp.get('author', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä') if comp.get('author') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
                            compositions.append(f"‚Ä¢ {comp_name} ({author_name})")
                    compositions_text = "\n".join(compositions) if compositions else "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
                    transition_info_text = ""
                    if concert_data and 'transition_info' in concert_data and concert_data['transition_info']:
                        transition = concert_data['transition_info']
                        time_between = transition.get('time_between', 0)
                        walk_time = transition.get('walk_time', 0)
                        status = transition.get('status', '')
                        
                        if status == 'same_hall':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ"
                        elif status == 'same_building':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–æ–º –∂–µ –∑–¥–∞–Ω–∏–∏"
                        elif status == 'hurry':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{walk_time} –º–∏–Ω (–Ω—É–∂–Ω–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è!)"
                        elif status == 'tight':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{walk_time} –º–∏–Ω (–≤–ø—Ä–∏—Ç—ã–∫)"
                        elif status == 'success':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{walk_time} –º–∏–Ω (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏)"
                        elif status == 'overlap':
                            transition_info_text = f"‚ö†Ô∏è –ù–∞–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤! –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ü–µ—Ä—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ {transition.get('current_end', '?')}, —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {transition.get('next_start', '?')}"
                        elif status == 'no_transition_data':
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        else:
                            transition_info_text = f"‚è±Ô∏è {time_between} –º–∏–Ω –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏ ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{walk_time} –º–∏–Ω"
                    else:
                        transition_info_text = "‚è±Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ü–µ—Ä—Ç–∞
                    concert_replacements = {
                        "{next_concert_name}": concert.get('name', '–ö–æ–Ω—Ü–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'),
                        "{next_concert_date}": concert.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
                        "{next_concert_time}": concert.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                        "{next_concert_hall}": concert.get('hall', '–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω'),
                        "{next_concert_duration}": concert.get('duration', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
                        "{next_concert_artists}": artists_text,
                        "{next_concert_compositions}": compositions_text,
                        "{transition_info}": transition_info_text,
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω
                    concert_replacements_to_apply.update(concert_replacements)
                    
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–∞–º—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏–∏
                    concert_replacements_to_apply[match.group(0)] = str(position)
                else:
                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞—è, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    concert_replacements_to_apply[match.group(0)] = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
            for placeholder, value in concert_replacements_to_apply.items():
                personalized = personalized.replace(placeholder, value)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            if user_data.get("last_purchase"):
                last_purchase = user_data["last_purchase"]
                if isinstance(last_purchase, str):
                    last_purchase = datetime.fromisoformat(last_purchase.replace('Z', '+00:00'))
                personalized = personalized.replace(
                    "{last_purchase}", 
                    last_purchase.strftime("%d.%m.%Y") if last_purchase else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
                )
            
            return personalized
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return template
    
    @staticmethod
    def get_templates(session: Session) -> List[MessageTemplate]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        return session.exec(select(MessageTemplate).where(MessageTemplate.is_active == True)).all()
    
    @staticmethod
    def create_template(session: Session, name: str, content: str, variables: str = "", is_active: bool = True) -> MessageTemplate:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        template = MessageTemplate(
            name=name,
            content=content,
            variables=variables,
            is_active=is_active
        )
        session.add(template)
        session.commit()
        session.refresh(template)
        return template
    
    @staticmethod
    def initialize_default_templates(session: Session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        existing_templates = session.exec(select(MessageTemplate)).all()
        if not existing_templates:
            for template_data in TelegramService.DEFAULT_TEMPLATES:
                TelegramService.create_template(
                    session,
                    template_data["name"],
                    template_data["content"],
                    template_data["variables"]
                )
            logger.info("–°–æ–∑–¥–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    @staticmethod
    def send_campaign(
        session: Session,
        users: List[User],
        message_text: str,
        campaign_name: str = None,
        template_id: Optional[int] = None,
        file_path: Optional[str] = None,
        file_type: Optional[str] = None,
        parse_mode: str = None
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Celery"""
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–∞–º–ø–∞–Ω–∏–∏
        campaign = TelegramCampaign(
            name=campaign_name or f"–ö–∞–º–ø–∞–Ω–∏—è {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            template_id=template_id,
            target_users_count=len(users),
            sent_at=datetime.utcnow()
        )
        session.add(campaign)
        session.commit()
        session.refresh(campaign)
        
        campaign_id = str(campaign.id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        for user in users:
            if not user.telegram_id:
                continue
                
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_data = TelegramService.get_user_data(user, session)
            personalized_message = TelegramService.personalize_message(message_text, user_data)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_record = TelegramMessage(
                telegram_id=user.telegram_id,
                user_id=user.id,
                message_text=personalized_message,
                file_path=file_path,
                file_type=file_type,
                parse_mode=parse_mode,
                status=MessageStatus.PENDING,
                campaign_id=campaign_id
            )
            session.add(message_record)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Celery
            send_telegram_message.delay(
                telegram_id=user.telegram_id,
                text=personalized_message,
                file_path=file_path,
                file_type=file_type,
                parse_mode=parse_mode,
                message_id=message_record.id
            )
        
        session.commit()
        return campaign_id
    
    @staticmethod
    def get_campaign_stats(session: Session, campaign_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏"""
        messages = session.exec(
            select(TelegramMessage).where(TelegramMessage.campaign_id == campaign_id)
        ).all()
        
        stats = {
            "total": len(messages),
            "pending": len([m for m in messages if m.status == MessageStatus.PENDING]),
            "sent": len([m for m in messages if m.status == MessageStatus.SENT]),
            "delivered": len([m for m in messages if m.status == MessageStatus.DELIVERED]),
            "failed": len([m for m in messages if m.status == MessageStatus.FAILED])
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞–º–ø–∞–Ω–∏–∏
        try:
            campaign_id_int = int(campaign_id)
            campaign = session.exec(
                select(TelegramCampaign).where(TelegramCampaign.id == campaign_id_int)
            ).first()
        except ValueError:
            campaign = None
        
        if campaign:
            campaign.sent_count = stats["sent"]
            campaign.delivered_count = stats["delivered"]
            campaign.failed_count = stats["failed"]
            session.add(campaign)
            session.commit()
        
        return stats
    
    @staticmethod
    def get_user_categories(session: Session) -> Dict[str, List[User]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        users_with_telegram = session.exec(
            select(User).where(User.telegram_id.is_not(None))
        ).all()
        
        categories = {
            "all": users_with_telegram,
            "with_purchases": [],
            "without_purchases": [],
            "new_users": [],
            "active_users": []
        }
        
        for user in users_with_telegram:
            user_data = TelegramService.get_user_data(user, session)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
            if user_data["tickets_count"] > 0:
                categories["with_purchases"].append(user)
            else:
                categories["without_purchases"].append(user)
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            if user.created_at:
                days_since_registration = (datetime.utcnow() - user.created_at).days
                if days_since_registration <= 30:
                    categories["new_users"].append(user)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ–∫—É–ø–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)
            if user_data["last_purchase"]:
                days_since_purchase = (datetime.utcnow() - user_data["last_purchase"]).days
                if days_since_purchase <= 90:
                    categories["active_users"].append(user)
        
        return categories
    
 