import json
import re
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Any
from sqlmodel import Session, select
from models import User, MessageTemplate, TelegramMessage, TelegramCampaign, MessageStatus, Purchase
from worker.tasks import send_telegram_message
import logging

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    DEFAULT_TEMPLATES = [
        {
            "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "content": "–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª—è '–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏'! üéµ\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π.",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}'
        },
        {
            "name": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ",
            "content": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ—Ä—Ç–µ!\n\n{concert_name}\n–î–∞—Ç–∞: {concert_date}\n–ó–∞–ª: {hall_name}\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –±–∏–ª–µ—Ç–∞—Ö!",
            "variables": '{"concert_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "concert_date": "–î–∞—Ç–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞", "hall_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞"}'
        },
        {
            "name": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "content": "üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å, {name}!\n\n{offer_text}\n\n–£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ {expiry_date}!",
            "variables": '{"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "offer_text": "–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "expiry_date": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"}'
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫",
            "content": "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:\n\nüé´ –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {tickets_count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_spent} ‚ÇΩ\nüéµ –ü–æ—Å–µ—â–µ–Ω–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤: {concerts_count}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è!",
            "variables": '{"tickets_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤", "total_spent": "–û–±—â–∞—è —Å—É–º–º–∞", "concerts_count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤"}'
        }
    ]
    
    @staticmethod
    def get_user_data(user: User, session: Session) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        data = {
            "id": user.id,
            "name": user.name or user.email.split('@')[0] if user.email else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "email": user.email,
            "telegram_id": user.telegram_id,
            "telegram_username": user.telegram_username,
            "created_at": user.created_at,
            "tickets_count": 0,
            "total_spent": 0,
            "concerts_count": 0,
            "last_purchase": None
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
        if user.external_id:
            purchases = session.exec(
                select(Purchase).where(Purchase.user_external_id == str(user.external_id))
            ).all()
            
            if purchases:
                data["tickets_count"] = len(purchases)
                data["total_spent"] = sum(p.price or 0 for p in purchases)
                data["concerts_count"] = len(set(p.concert_id for p in purchases))
                data["last_purchase"] = max(p.purchased_at for p in purchases if p.purchased_at)
        
        return data
    
    @staticmethod
    def personalize_message(template: str, user_data: Dict[str, Any]) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        try:
            # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
            personalized = template
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            replacements = {
                "{name}": user_data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                "{email}": user_data.get("email", ""),
                "{telegram_username}": user_data.get("telegram_username", ""),
                "{tickets_count}": str(user_data.get("tickets_count", 0)),
                "{total_spent}": str(user_data.get("total_spent", 0)),
                "{concerts_count}": str(user_data.get("concerts_count", 0)),
                "{user_id}": str(user_data.get("id", "")),
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤
                "{concert_name}": user_data.get("concert_name", "–ö–æ–Ω—Ü–µ—Ä—Ç"),
                "{concert_date}": user_data.get("concert_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                "{hall_name}": user_data.get("hall_name", "–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"),
                # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                "{offer_text}": user_data.get("offer_text", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
                "{expiry_date}": user_data.get("expiry_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
            }
            
            for placeholder, value in replacements.items():
                personalized = personalized.replace(placeholder, value)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            if user_data.get("last_purchase"):
                last_purchase = user_data["last_purchase"]
                if isinstance(last_purchase, str):
                    last_purchase = datetime.fromisoformat(last_purchase.replace('Z', '+00:00'))
                personalized = personalized.replace(
                    "{last_purchase}", 
                    last_purchase.strftime("%d.%m.%Y") if last_purchase else "–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫"
                )
            
            return personalized
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return template
    
    @staticmethod
    def get_templates(session: Session) -> List[MessageTemplate]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        return session.exec(select(MessageTemplate).where(MessageTemplate.is_active == True)).all()
    
    @staticmethod
    def create_template(session: Session, name: str, content: str, variables: str = "") -> MessageTemplate:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        template = MessageTemplate(
            name=name,
            content=content,
            variables=variables
        )
        session.add(template)
        session.commit()
        session.refresh(template)
        return template
    
    @staticmethod
    def initialize_default_templates(session: Session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        existing_templates = session.exec(select(MessageTemplate)).all()
        if not existing_templates:
            for template_data in TelegramService.DEFAULT_TEMPLATES:
                TelegramService.create_template(
                    session,
                    template_data["name"],
                    template_data["content"],
                    template_data["variables"]
                )
            logger.info("–°–æ–∑–¥–∞–Ω—ã —à–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    @staticmethod
    def send_campaign(
        session: Session,
        users: List[User],
        message_text: str,
        campaign_name: str = None,
        template_id: Optional[int] = None,
        file_path: Optional[str] = None,
        file_type: Optional[str] = None,
        parse_mode: str = None
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Celery"""
        
        campaign_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–∞–º–ø–∞–Ω–∏–∏
        campaign = TelegramCampaign(
            name=campaign_name or f"–ö–∞–º–ø–∞–Ω–∏—è {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            template_id=template_id,
            target_users_count=len(users),
            sent_at=datetime.utcnow()
        )
        session.add(campaign)
        session.commit()
        session.refresh(campaign)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        for user in users:
            if not user.telegram_id:
                continue
                
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_data = TelegramService.get_user_data(user, session)
            personalized_message = TelegramService.personalize_message(message_text, user_data)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_record = TelegramMessage(
                telegram_id=user.telegram_id,
                user_id=user.id,
                message_text=personalized_message,
                file_path=file_path,
                file_type=file_type,
                parse_mode=parse_mode,
                status=MessageStatus.PENDING,
                campaign_id=campaign_id
            )
            session.add(message_record)
            
            # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Celery
            send_telegram_message.delay(
                telegram_id=user.telegram_id,
                text=personalized_message,
                file_path=file_path,
                file_type=file_type,
                parse_mode=parse_mode,
                message_id=message_record.id
            )
        
        session.commit()
        return campaign_id
    
    @staticmethod
    def get_campaign_stats(session: Session, campaign_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏"""
        messages = session.exec(
            select(TelegramMessage).where(TelegramMessage.campaign_id == campaign_id)
        ).all()
        
        stats = {
            "total": len(messages),
            "pending": len([m for m in messages if m.status == MessageStatus.PENDING]),
            "sent": len([m for m in messages if m.status == MessageStatus.SENT]),
            "delivered": len([m for m in messages if m.status == MessageStatus.DELIVERED]),
            "failed": len([m for m in messages if m.status == MessageStatus.FAILED])
        }
        
        return stats
    
    @staticmethod
    def get_user_categories(session: Session) -> Dict[str, List[User]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        users_with_telegram = session.exec(
            select(User).where(User.telegram_id.is_not(None))
        ).all()
        
        categories = {
            "all": users_with_telegram,
            "with_purchases": [],
            "without_purchases": [],
            "new_users": [],
            "active_users": []
        }
        
        for user in users_with_telegram:
            user_data = TelegramService.get_user_data(user, session)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
            if user_data["tickets_count"] > 0:
                categories["with_purchases"].append(user)
            else:
                categories["without_purchases"].append(user)
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            if user.created_at:
                days_since_registration = (datetime.utcnow() - user.created_at).days
                if days_since_registration <= 30:
                    categories["new_users"].append(user)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ–∫—É–ø–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)
            if user_data["last_purchase"]:
                days_since_purchase = (datetime.utcnow() - user_data["last_purchase"]).days
                if days_since_purchase <= 90:
                    categories["active_users"].append(user)
        
        return categories 