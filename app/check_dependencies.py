#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
"""

import subprocess
import sys
import re
from typing import Dict, List, Tuple

def get_installed_packages() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Å –≤–µ—Ä—Å–∏—è–º–∏"""
    try:
        result = subprocess.run([sys.executable, '-m', 'pip', 'freeze'], 
                              capture_output=True, text=True, check=True)
        packages = {}
        for line in result.stdout.strip().split('\n'):
            if '==' in line:
                name, version = line.split('==', 1)
                packages[name.lower()] = version
        return packages
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}")
        return {}

def get_requirements_packages() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt"""
    packages = {}
    try:
        with open('requirements.txt', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '==' in line:
                    name, version = line.split('==', 1)
                    packages[name.lower()] = version
    except FileNotFoundError:
        print("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return packages

def check_compatibility() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    issues = []
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏
    critical_deps = {
        'python': '3.11',
        'sqlmodel': '0.0.24',
        'pydantic': '1.10.13',
        'fastapi': '0.104.1',
        'sqlalchemy': '2.0.31',
        'psycopg2-binary': '2.9.10'
    }
    
    installed = get_installed_packages()
    required = get_requirements_packages()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for dep, expected_version in critical_deps.items():
        if dep in installed:
            actual_version = installed[dep]
            if actual_version != expected_version:
                issues.append(f"–ö–†–ò–¢–ò–ß–ù–û: {dep} –≤–µ—Ä—Å–∏—è {actual_version} != {expected_version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
    for dep, version in required.items():
        if dep not in installed:
            issues.append(f"–û–¢–°–£–¢–°–¢–í–£–ï–¢: {dep}=={version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
    for dep in installed:
        if dep not in required and not dep.startswith('pip'):
            issues.append(f"–õ–ò–®–ù–ò–ô: {dep}=={installed[dep]}")
    
    return issues

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    if version.major != 3 or version.minor != 11:
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Python {version.major}.{version.minor} –≤–º–µ—Å—Ç–æ 3.11")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    python_ok = check_python_version()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    issues = check_compatibility()
    
    if issues:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"  - {issue}")
        print()
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ Docker-–æ–±—Ä–∞–∑: docker-compose build --no-cache")
        print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å")
        print("  3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Python 3.11")
        return False
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 