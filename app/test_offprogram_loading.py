import pandas as pd
import os
from database.database import get_session
from services.crud.data_loader import load_off_program
from models import OffProgram, EventFormat
from sqlmodel import select

def test_offprogram_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –û—Ñ—Ñ-–ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    file_path = 'data/OffProgram-good.xlsx'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        print("üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –û—Ñ—Ñ-–ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        df = pd.read_excel(file_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        session = next(get_session())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...")
        load_off_program(session, df)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏...")
        events = session.exec(select(OffProgram)).all()
        print(f"‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(events)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
        formats = {}
        for event in events:
            format_name = event.format.value if event.format else "–ù–µ —É–∫–∞–∑–∞–Ω"
            formats[format_name] = formats.get(format_name, 0) + 1
        
        print("   –§–æ—Ä–º–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:")
        for format_name, count in formats.items():
            print(f"     ‚Ä¢ {format_name}: {count}")
        
        # –ü–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
        recommended = sum(1 for event in events if event.recommend)
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {recommended}")
        
        # –ü–æ –∑–∞–ª–∞–º
        halls = {}
        for event in events:
            halls[event.hall_name] = halls.get(event.hall_name, 0) + 1
        
        print("   –ó–∞–ª—ã:")
        for hall_name, count in halls.items():
            print(f"     ‚Ä¢ {hall_name}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:")
        for i, event in enumerate(events[:5]):
            print(f"   {i+1}. {event.event_name}")
            print(f"      –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y %H:%M')}")
            print(f"      –ó–∞–ª: {event.hall_name}")
            print(f"      –§–æ—Ä–º–∞—Ç: {event.format.value if event.format else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {'–î–∞' if event.recommend else '–ù–µ—Ç'}")
            print()
        
        session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –û–§–§-–ü–†–û–ì–†–ê–ú–ú–´")
    print("=" * 50)
    
    success = test_offprogram_loading()
    
    if success:
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!") 