#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.database import get_session
from services.crud.data_loader import update_customer_route_matches
from models import CustomerRouteMatch, Route, Purchase
from sqlmodel import select
from sqlalchemy import func
import time
import json

def analyze_customer_matching_performance():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏...")
    print("=" * 70)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = next(get_session())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_routes = len(session.exec(select(Route)).all())
        total_customers = len(session.exec(select(Purchase.user_external_id).distinct()).all())
        
        print(f"üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_routes:,}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {total_customers:,}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
        customer_concerts_stats = session.exec(
            select(
                Purchase.user_external_id,
                func.count(func.distinct(Purchase.concert_id)).label('concert_count')
            )
            .group_by(Purchase.user_external_id)
        ).all()
        
        concert_counts = [stat[1] for stat in customer_concerts_stats]
        avg_concerts_per_customer = sum(concert_counts) / len(concert_counts) if concert_counts else 0
        max_concerts = max(concert_counts) if concert_counts else 0
        min_concerts = min(concert_counts) if concert_counts else 0
        
        print(f"\nüéµ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤: {avg_concerts_per_customer:.1f}")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min_concerts}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {max_concerts}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
        route_lengths = []
        for route in session.exec(select(Route)).all():
            if route.Sostav:
                length = len([x.strip() for x in route.Sostav.split(',') if x.strip()])
                route_lengths.append(length)
        
        avg_route_length = sum(route_lengths) / len(route_lengths) if route_lengths else 0
        max_route_length = max(route_lengths) if route_lengths else 0
        min_route_length = min(route_lengths) if route_lengths else 0
        
        print(f"\nüõ£Ô∏è  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª–∏–Ω—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {avg_route_length:.1f} –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min_route_length}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_route_length}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        print(f"\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        update_customer_route_matches(session)
        
        total_time = time.time() - start_time
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        matches = session.exec(select(CustomerRouteMatch)).all()
        
        exact_matches = len([m for m in matches if m.match_type == 'exact'])
        partial_matches = len([m for m in matches if m.match_type == 'partial'])
        no_matches = len([m for m in matches if m.match_type == 'none'])
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {len(matches):,}")
        print(f"   ‚Ä¢ –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {exact_matches:,} ({exact_matches/len(matches)*100:.1f}%)")
        print(f"   ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {partial_matches:,} ({partial_matches/len(matches)*100:.1f}%)")
        print(f"   ‚Ä¢ –ë–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {no_matches:,} ({no_matches/len(matches)*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        customers_per_second = len(matches) / total_time if total_time > 0 else 0
        routes_per_second = total_routes / total_time if total_time > 0 else 0
        
        print(f"\nüöÄ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(f"   ‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É: {customers_per_second:.1f}")
        print(f"   ‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {routes_per_second:.1f}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {total_time/len(matches)*1000:.2f} –º—Å")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if partial_matches > 0:
            partial_match_percentages = [m.match_percentage for m in matches if m.match_percentage is not None]
            avg_partial_match = sum(partial_match_percentages) / len(partial_match_percentages) if partial_match_percentages else 0
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {avg_partial_match:.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if total_time > 60:
            print(f"   ‚ö†Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–ª–∏–∫–æ ({total_time:.1f} —Å–µ–∫), —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ:")
            print(f"      - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞")
            print(f"      - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            print(f"      - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"   ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ")
        
        if exact_matches / len(matches) < 0.1:
            print(f"   ‚ö†Ô∏è  –ú–∞–ª–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ({exact_matches/len(matches)*100:.1f}%), –≤–æ–∑–º–æ–∂–Ω–æ:")
            print(f"      - –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
            print(f"      - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        else:
            print(f"   ‚úÖ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        if customers_per_second < 10:
            print(f"   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ({customers_per_second:.1f} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/—Å–µ–∫)")
        else:
            print(f"   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = {
            'total_routes': total_routes,
            'total_customers': total_customers,
            'avg_concerts_per_customer': round(avg_concerts_per_customer, 2),
            'avg_route_length': round(avg_route_length, 2),
            'execution_time_seconds': round(total_time, 2),
            'customers_processed': len(matches),
            'exact_matches': exact_matches,
            'partial_matches': partial_matches,
            'no_matches': no_matches,
            'exact_match_percentage': round(exact_matches/len(matches)*100, 2),
            'partial_match_percentage': round(partial_matches/len(matches)*100, 2),
            'no_match_percentage': round(no_matches/len(matches)*100, 2),
            'customers_per_second': round(customers_per_second, 2),
            'routes_per_second': round(routes_per_second, 2),
            'time_per_customer_ms': round(total_time/len(matches)*1000, 2)
        }
        
        with open('customer_matching_performance_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ customer_matching_performance_report.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()
    finally:
        session.close()

if __name__ == "__main__":
    analyze_customer_matching_performance() 