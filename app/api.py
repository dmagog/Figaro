from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from database.database import init_db
from database.config import get_settings
from services.logging.logging import get_logger
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn

from routes.home import home_route
from routes.auth import auth_route
from routes.user import user_route
from routes.purchase import purchase_route
from routes.tickets import tickets_route

from fastapi import APIRouter, Depends, HTTPException, status, Request
from worker.tasks import send_telegram_message
from app.services.crud import user as UserService
from app.database.database import get_session
from app.auth.authenticate import authenticate_cookie
from fastapi import UploadFile, File, Form
import shutil
from tempfile import NamedTemporaryFile
from sqlalchemy import select
from models.user import User
from app.services.crud.purchase import get_user_unique_concerts_with_details
from app.routes.user.temp_routes import calculate_transition_time, calculate_route_statistics

logger = get_logger(logger_name=__name__)
settings = get_settings()

api_router = APIRouter()

@api_router.post("/telegram/send-test")
async def send_test_telegram_message(request: Request, session=Depends(get_session)):
    token = request.cookies.get("access_token") or request.cookies.get("Authorization")
    if not token:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    user_email = await authenticate_cookie(token)
    if not user_email:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    user = UserService.get_user_by_email(user_email, session)
    if not user or not user.telegram_id:
        raise HTTPException(status_code=404, detail="Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
    # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    send_telegram_message.delay(user.telegram_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ FastAPI —á–µ—Ä–µ–∑ Celery!", None, None, "Markdown")
    return {"success": True, "message": "–ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å."}

@api_router.post("/admin/telegram/broadcast")
async def broadcast_telegram_message(
    request: Request,
    session=Depends(get_session),
    text: str = Form(None),
    file: UploadFile = File(None),
    file_type: str = Form(None)
):
    token = request.cookies.get("access_token") or request.cookies.get("Authorization")
    if not token:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    user_email = await authenticate_cookie(token)
    if not user_email:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    user = UserService.get_user_by_email(user_email, session)
    if not user or not user.is_superuser:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id
    users = session.exec(select(User).where(User.telegram_id.is_not(None))).all()
    if not users:
        return {"success": False, "message": "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram."}
    file_path = None
    temp_file = None
    if file:
        suffix = ".jpg" if file_type == "photo" else ".pdf" if file_type == "document" else ""
        temp_file = NamedTemporaryFile(delete=False, suffix=suffix)
        with temp_file as f:
            shutil.copyfileobj(file.file, f)
        file_path = temp_file.name
    count = 0
    for u in users:
        send_telegram_message.delay(u.telegram_id, text, file_path, file_type, "Markdown")
        count += 1
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –±—ã–ª)
    if temp_file:
        temp_file.close()
    return {"success": True, "message": f"–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {count}", "users": count}

@api_router.get("/api/user/route-data/{user_external_id}")
async def get_user_route_data_api(user_external_id: str, session=Depends(get_session)):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        concerts_data = get_user_unique_concerts_with_details(session, user_external_id)
        
        if not concerts_data:
            return {"error": "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ"}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        from datetime import datetime
        sorted_concerts = sorted(concerts_data, key=lambda x: x['concert'].get('datetime', datetime.min))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        concerts_by_day_with_transitions = {}
        current_day = None
        day_concerts = []
        
        for i, concert_data in enumerate(sorted_concerts):
            concert = concert_data['concert']
            if concert.get('datetime'):
                day = concert['datetime'].date()
                if current_day != day:
                    if current_day and day_concerts:
                        concerts_by_day_with_transitions[current_day] = day_concerts
                    current_day = day
                    day_concerts = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
                concert_with_transition = concert_data.copy()
                if i < len(sorted_concerts) - 1:
                    next_concert_data = sorted_concerts[i + 1]
                    transition_info = calculate_transition_time(session, concert_data, next_concert_data)
                    concert_with_transition['transition_info'] = transition_info
                else:
                    concert_with_transition['transition_info'] = None
                
                day_concerts.append(concert_with_transition)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        if current_day and day_concerts:
            concerts_by_day_with_transitions[current_day] = day_concerts
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        route_stats = calculate_route_statistics(session, sorted_concerts, concerts_by_day_with_transitions)
        
        return {
            "sorted_concerts": sorted_concerts,
            "route_summary": route_stats,
            "concerts_by_day": concerts_by_day_with_transitions
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

@api_router.post("/api/user/format-route")
async def format_route_concerts_list_api(
    concerts_data: dict,
    detailed: bool = False,
    day_number: int = None
):
    """API endpoint –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤"""
    try:
        sorted_concerts = concerts_data.get("sorted_concerts", [])
        if not sorted_concerts:
            return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–Ω—è–º
        concerts_by_day = {}
        for i, concert_data in enumerate(sorted_concerts):
            concert = concert_data['concert']
            if concert.get('datetime'):
                day = concert['datetime'].date()
                if day not in concerts_by_day:
                    concerts_by_day[day] = []
                concerts_by_day[day].append({
                    'index': i + 1,
                    'time': concert['datetime'].strftime("%H:%M"),
                    'name': concert.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'hall': concert.get('hall', {}).get('name', '–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω'),
                    'duration': str(concert.get('duration', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞')),
                    'genre': concert.get('genre', '–ñ–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'),
                    'concert_data': concert_data
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        sorted_days = sorted(concerts_by_day.keys())
        
        if day_number:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            try:
                day_index = int(day_number) - 1
                if 0 <= day_index < len(sorted_days):
                    target_day = sorted_days[day_index]
                    day_concerts = concerts_by_day[target_day]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    day_str = str(target_day.day)
                    month_names = {
                        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                    }
                    month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
                    
                    concerts_text = f"üéà *–î–µ–Ω—å {day_index + 1}* ({day_str} {month_str})\n\n"
                    
                    for concert in day_concerts:
                        if detailed:
                            concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                            concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                            
                            if concert['concert_data'].get('transition_info'):
                                transition = concert['concert_data']['transition_info']
                                if transition.get('status') == 'success':
                                    concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                                elif transition.get('status') == 'same_hall':
                                    concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                            
                            concerts_text += "\n"
                        else:
                            concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    
                    return concerts_text
                else:
                    return f"–î–µ–Ω—å {day_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ"
            except ValueError:
                return f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è: {day_number}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
        concerts_text = ""
        for day_index, target_day in enumerate(sorted_days, 1):
            day_concerts = concerts_by_day[target_day]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            day_str = str(target_day.day)
            month_names = {
                1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
            }
            month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
            
            concerts_text += f"üéà *–î–µ–Ω—å {day_index}* ({day_str} {month_str})\n\n"
            
            for concert in day_concerts:
                if detailed:
                    concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    concerts_text += f"   üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                    
                    if concert['concert_data'].get('transition_info'):
                        transition = concert['concert_data']['transition_info']
                        if transition.get('status') == 'success':
                            concerts_text += f"   üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                        elif transition.get('status') == 'same_hall':
                            concerts_text += f"   üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                    
                    concerts_text += "\n"
                else:
                    concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
            
            concerts_text += "\n"
        
        return concerts_text.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"

@api_router.post("/api/user/format-summary")
async def format_route_summary_api(request_data: dict):
    """API endpoint –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º concerts_data –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        concerts_data = request_data.get("concerts_data", {})
        if not concerts_data:
            return "–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        route_summary = concerts_data.get("route_summary", {})
        if not route_summary:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ route_summary –Ω–µ –ø—É—Å—Ç–æ–π
        if not isinstance(route_summary, dict) or len(route_summary) == 0:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        summary_text = "üìä *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        summary_text += f"üéµ *–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {route_summary.get('total_concerts', 0)}\n"
        summary_text += f"üìÖ *–î–Ω–µ–π:* {route_summary.get('total_days', 0)}\n"
        summary_text += f"üèõÔ∏è *–ó–∞–ª–æ–≤:* {route_summary.get('total_halls', 0)}\n"
        summary_text += f"üé® *–ñ–∞–Ω—Ä–æ–≤:* {route_summary.get('total_genres', 0)}\n"
        
        # –í—Ä–µ–º—è
        concert_time = route_summary.get('total_concert_time_minutes', 0)
        if concert_time:
            summary_text += f"‚è±Ô∏è *–í—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {concert_time} –º–∏–Ω\n"
        
        trans_time = route_summary.get('total_walk_time_minutes', 0)
        if trans_time:
            summary_text += f"üö∂ *–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* {trans_time} –º–∏–Ω\n"
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = route_summary.get('total_distance_km', 0)
        if distance:
            summary_text += f"üìç *–ü—Ä–æ–π–¥–µ–Ω–æ:* {distance} –∫–º\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        compositions = route_summary.get('unique_compositions', 0)
        if compositions:
            summary_text += f"üéº *–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:* {compositions}\n"
        
        authors = route_summary.get('unique_authors', 0)
        if authors:
            summary_text += f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä–æ–≤:* {authors}\n"
        
        artists = route_summary.get('unique_artists', 0)
        if artists:
            summary_text += f"üé≠ *–ê—Ä—Ç–∏—Å—Ç–æ–≤:* {artists}\n"
        
        summary_text += "\nüéâ *–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Ñ–µ—Å—Ç–∏–≤–∞–ª—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö!*"
        
        return summary_text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"


def create_application() -> FastAPI:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        FastAPI: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = FastAPI(
        title=settings.APP_NAME,
        description=settings.APP_DESCRIPTION,
        version=settings.API_VERSION,
        docs_url="/api/docs",
        redoc_url="/api/redoc"
    )

    # app.add_middleware(Analytics, api_key="39d40b20-6328-4a67-ae74-940f0cab5737")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ª–æ—è
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫—É static
    app.mount("/static", StaticFiles(directory="static"), name="static")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.include_router(home_route, tags=['Home'])
    app.include_router(auth_route, tags=['Auth'])
    app.include_router(user_route, tags=['User'])
    app.include_router(purchase_route, tags=['Purchase'])
    app.include_router(tickets_route, tags=['Tickets'])
    app.include_router(api_router, tags=['API'])
    


    return app

app = create_application()

@app.on_event("startup") 
def on_startup():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db(demostart = False)
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        raise   
    

if __name__ == '__main__':
    uvicorn.run('api:app', host='0.0.0.0', port=8080, reload=True, log_level="info")
