import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode
from sqlmodel import Session, select
from app.models.user import User, TelegramLinkCode
from app.database.simple_engine import simple_engine
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BOT_LINK = os.getenv("BOT_LINK", "https://t.me/Figaro_FestivalBot")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è '–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏'.\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ.",
        reply=False
    )

@dp.message_handler(lambda m: len(m.text.strip()) >= 10 and len(m.text.strip()) <= 50)
async def handle_link_code(message: types.Message):
    code = message.text.strip()
    with Session(simple_engine) as session:
        now = datetime.utcnow()
        link_code = session.exec(
            select(TelegramLinkCode)
            .where(TelegramLinkCode.code == code)
            .where(TelegramLinkCode.expires_at > now)
        ).first()
        if not link_code:
            await message.reply("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user = session.get(User, link_code.user_id)
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º telegram_id –∏ username
        user.telegram_id = message.from_user.id
        if hasattr(message.from_user, 'username') and message.from_user.username:
            user.telegram_username = message.from_user.username
        else:
            user.telegram_username = None
        session.add(user)
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        session.delete(link_code)
        session.commit()
        await message.reply("‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö.")

@dp.message_handler(commands=["whoami"])
async def whoami(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply(f"–í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {user.email}\n–í–∞—à–µ –∏–º—è: {user.name or '-'}")
        else:
            await message.reply("–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

@dp.message_handler(commands=["testmsg"])
async def testmsg(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            await message.reply("‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) 