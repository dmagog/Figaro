import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sqlmodel import Session, select
from app.models.user import User, TelegramLinkCode
from app.database.simple_engine import simple_engine
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BOT_LINK = os.getenv("BOT_LINK", "https://t.me/Figaro_FestivalBot")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéµ –ú–æ–π –º–∞—Ä—à—Ä—É—Ç", callback_data="my_route"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        InlineKeyboardButton("üéº –ö–æ–Ω—Ü–µ—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è", callback_data="today_concerts"),
        InlineKeyboardButton("üèõÔ∏è –ó–∞–ª—ã", callback_data="halls"),
        InlineKeyboardButton("üé≠ –ñ–∞–Ω—Ä—ã", callback_data="genres"),
        InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton("üîó –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="web_profile")
    )
    return keyboard

def get_route_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç", callback_data="route_brief"),
        InlineKeyboardButton("üìñ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="route_detailed"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="route_stats"),
        InlineKeyboardButton("üìÖ –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å", callback_data="route_day"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

def get_day_selection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    keyboard = InlineKeyboardMarkup(row_width=3)
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π 1-5 (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    for day in range(1, 6):
        keyboard.add(InlineKeyboardButton(f"–î–µ–Ω—å {day}", callback_data=f"day_{day}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="route_menu"))
    return keyboard

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await message.reply(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name or '–¥—Ä—É–≥'}! –Ø –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è '–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏'.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –ø—Ä–æ—Å–∏–º –∫–æ–¥
            await message.reply(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è '–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏'.\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∞ —Å–∞–π—Ç–µ.",
                reply=False
            )

@dp.message_handler(lambda m: len(m.text.strip()) >= 10 and len(m.text.strip()) <= 50)
async def handle_link_code(message: types.Message):
    code = message.text.strip()
    with Session(simple_engine) as session:
        now = datetime.utcnow()
        link_code = session.exec(
            select(TelegramLinkCode)
            .where(TelegramLinkCode.code == code)
            .where(TelegramLinkCode.expires_at > now)
        ).first()
        if not link_code:
            await message.reply("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user = session.get(User, link_code.user_id)
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º telegram_id –∏ username
        user.telegram_id = message.from_user.id
        if hasattr(message.from_user, 'username') and message.from_user.username:
            user.telegram_username = message.from_user.username
        else:
            user.telegram_username = None
        session.add(user)
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        session.delete(link_code)
        session.commit()
        await message.reply(
            "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –±–æ—Ç–∞.",
            reply_markup=get_main_menu_keyboard()
        )

@dp.message_handler(commands=["whoami"])
async def whoami(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply(f"–í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {user.email}\n–í–∞—à–µ –∏–º—è: {user.name or '-'}")
        else:
            await message.reply("–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

@dp.message_handler(commands=["testmsg"])
async def testmsg(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            await message.reply("‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == callback_query.from_user.id)).first()
        if not user:
            await bot.send_message(callback_query.from_user.id, "‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")
            return
        
        action = callback_query.data
        
        if action == "main_menu":
            await bot.edit_message_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action == "my_route":
            await bot.edit_message_text(
                "üéµ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞:",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_route_menu_keyboard()
            )
        
        elif action == "route_menu":
            await bot.edit_message_text(
                "üéµ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞:",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_route_menu_keyboard()
            )
        
        elif action == "route_brief":
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç
            try:
                from app.services.telegram_service import TelegramService
                user_data = TelegramService.get_user_data(user, session)
                template = "{route_concerts_list}"
                message_text = TelegramService.personalize_message(template, user_data)
                await bot.edit_message_text(
                    message_text,
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
            except Exception as e:
                await bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
        
        elif action == "route_detailed":
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç
            try:
                from app.services.telegram_service import TelegramService
                user_data = TelegramService.get_user_data(user, session)
                template = "{route_concerts_list:detailed}"
                message_text = TelegramService.personalize_message(template, user_data)
                await bot.edit_message_text(
                    message_text,
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
            except Exception as e:
                await bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
        
        elif action == "route_stats":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
            try:
                from app.services.telegram_service import TelegramService
                user_data = TelegramService.get_user_data(user, session)
                template = "{route_summary}"
                message_text = TelegramService.personalize_message(template, user_data)
                await bot.edit_message_text(
                    message_text,
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
            except Exception as e:
                await bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_route_menu_keyboard()
                )
        
        elif action == "route_day":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è
            await bot.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_day_selection_keyboard()
            )
        
        elif action.startswith("day_"):
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            day_number = action.split("_")[1]
            try:
                from app.services.telegram_service import TelegramService
                user_data = TelegramService.get_user_data(user, session)
                template = f"{{route_concerts_list:day={day_number}}}"
                message_text = TelegramService.personalize_message(template, user_data)
                await bot.edit_message_text(
                    message_text,
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_day_selection_keyboard()
                )
            except Exception as e:
                await bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –¥–µ–Ω—å {day_number}: {str(e)}",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_day_selection_keyboard()
                )
        
        elif action == "statistics":
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                from app.services.telegram_service import TelegramService
                user_data = TelegramService.get_user_data(user, session)
                template = "{route_summary}"
                message_text = TelegramService.personalize_message(template, user_data)
                await bot.edit_message_text(
                    message_text,
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_main_menu_keyboard()
                )
            except Exception as e:
                await bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                    callback_query.from_user.id,
                    callback_query.message.message_id,
                    reply_markup=get_main_menu_keyboard()
                )
        
        elif action == "profile":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
            profile_text += f"üìß Email: {user.email}\n"
            profile_text += f"üë§ –ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"üÜî ID: {user.id}\n"
            if user.telegram_username:
                profile_text += f"üì± Telegram: @{user.telegram_username}\n"
            
            await bot.edit_message_text(
                profile_text,
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action == "help":
            help_text = "‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
            help_text += "üéµ *–ú–æ–π –º–∞—Ä—à—Ä—É—Ç* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è\n"
            help_text += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞\n"
            help_text += "üéº *–ö–æ–Ω—Ü–µ—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è* - –∫–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            help_text += "üèõÔ∏è *–ó–∞–ª—ã* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ª–∞—Ö\n"
            help_text += "üé≠ *–ñ–∞–Ω—Ä—ã* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∞–Ω—Ä–∞—Ö\n"
            help_text += "üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
            help_text += "üîó *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* - —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—é\n\n"
            help_text += "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞."
            
            await bot.edit_message_text(
                help_text,
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action == "web_profile":
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            web_url = "http://localhost:8000/profile"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            await bot.edit_message_text(
                f"üîó *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É:\n{web_url}",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action in ["today_concerts", "halls", "genres"]:
            # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await bot.edit_message_text(
                "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=get_main_menu_keyboard()
            )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) 