import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import create_engine, text
from sqlmodel import Session, select
from app.database.simple_engine import simple_engine
from app.models.user import User, TelegramLinkCode
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SITE_LINK = os.getenv("SITE_LINK")
BOT_LINK = os.getenv("BOT_LINK", "https://t.me/Figaro_FestivalBot")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üó∫Ô∏è –ú–æ–π –º–∞—Ä—à—Ä—É—Ç", callback_data="my_route"),
        InlineKeyboardButton("üö∂üèº‚Äç‚û°Ô∏è –û—Ñ—Ñ-–ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="offprog"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        InlineKeyboardButton("üéº –ö–æ–Ω—Ü–µ—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è", callback_data="today_concerts"),
        InlineKeyboardButton("üèõÔ∏è –ó–∞–ª—ã", callback_data="halls"),
        InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton("üîó –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="web_profile"),
        InlineKeyboardButton("üåê –°–∞–π—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è", callback_data="site_official")
    )
    return keyboard

def get_route_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç", callback_data="route_brief"),
        InlineKeyboardButton("üìñ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç", callback_data="route_detailed"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="route_stats"),
        InlineKeyboardButton("üìÖ –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å", callback_data="route_day"),
        InlineKeyboardButton("¬´¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

async def get_day_selection_keyboard(telegram_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π
        result = await api_client.get_route_days(telegram_id)
        if "error" in result:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("¬´¬´ –ù–∞–∑–∞–¥", callback_data="route_menu"))
            return keyboard
        
        days = result.get("days", [])
        if not days:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–Ω–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="route_menu"))
            return keyboard
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–Ω—è–º–∏
        keyboard = InlineKeyboardMarkup(row_width=2)
        for day_info in days:
            day_number = day_info["day_number"]
            formatted_date = day_info["formatted_date"]
            concerts_count = day_info["concerts_count"]
            button_text = f"–î–µ–Ω—å {day_number} ({formatted_date}) - {concerts_count} –∫–æ–Ω—Ü."
            keyboard.add(InlineKeyboardButton(button_text, callback_data=f"day_{day_number}"))
        
        keyboard.add(InlineKeyboardButton("¬´¬´ –ù–∞–∑–∞–¥", callback_data="route_menu"))
        return keyboard
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–Ω–µ–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("¬´¬´ –ù–∞–∑–∞–¥", callback_data="route_menu"))
        return keyboard

from services.api_client import ApiClient

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
api_client = ApiClient()

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å Markdown
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def send_template_message_async(template_id: int, telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —à–∞–±–ª–æ–Ω—É —á–µ—Ä–µ–∑ HTTP API –∏ Celery"""
    try:
        return await api_client.send_template_message(telegram_id, template_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"}

def format_route_concerts_list(concerts_data, detailed=False, day_number=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        sorted_concerts = concerts_data.get("sorted_concerts", [])
        if not sorted_concerts:
            return "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –¥–Ω—è–º
        concerts_by_day = {}
        for i, concert_data in enumerate(sorted_concerts):
            concert = concert_data['concert']
            if concert.get('datetime'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ datetime —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                if isinstance(concert['datetime'], str):
                    from datetime import datetime
                    try:
                        dt = datetime.fromisoformat(concert['datetime'].replace('Z', '+00:00'))
                    except:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç
                        continue
                else:
                    dt = concert['datetime']
                
                day = dt.date()
                if day not in concerts_by_day:
                    concerts_by_day[day] = []
                concerts_by_day[day].append({
                    'index': i + 1,
                    'time': dt.strftime("%H:%M"),
                    'name': escape_markdown(concert.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')),
                    'hall': escape_markdown(concert.get('hall', {}).get('name', '–ó–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω')),
                    'duration': escape_markdown(str(concert.get('duration', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'))),
                    'genre': escape_markdown(concert.get('genre', '–ñ–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')),
                    'concert_data': concert_data
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        sorted_days = sorted(concerts_by_day.keys())
        
        if day_number:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            try:
                day_index = int(day_number) - 1
                if 0 <= day_index < len(sorted_days):
                    target_day = sorted_days[day_index]
                    day_concerts = concerts_by_day[target_day]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    day_str = str(target_day.day)
                    month_names = {
                        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
                    }
                    month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
                    
                    concerts_text = f"üéà *–î–µ–Ω—å {day_index + 1}* ({day_str} {month_str})\n\n"
                    
                    for concert in day_concerts:
                        if detailed:
                            concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                            concerts_text += f"üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                            
                            if concert['concert_data'].get('transition_info'):
                                transition = concert['concert_data']['transition_info']
                                if transition.get('status') == 'success':
                                    concerts_text += f"üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                                elif transition.get('status') == 'same_hall':
                                    concerts_text += f"üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                            
                            concerts_text += "\n"
                        else:
                            concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    
                    return concerts_text
                else:
                    return f"–î–µ–Ω—å {day_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ"
            except ValueError:
                return f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è: {day_number}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
        concerts_text = ""
        for day_index, target_day in enumerate(sorted_days, 1):
            day_concerts = concerts_by_day[target_day]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            day_str = str(target_day.day)
            month_names = {
                1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
                5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
                9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
            }
            month_str = month_names.get(target_day.month, "–º–µ—Å—è—Ü–∞")
            
            concerts_text += f"üéà *–î–µ–Ω—å {day_index}* ({day_str} {month_str})\n\n"
            
            for concert in day_concerts:
                if detailed:
                    concerts_text += f"*{concert['time']}* ‚Ä¢ {concert['index']}. {concert['name']}\n"
                    concerts_text += f"üèõÔ∏è {concert['hall']} ‚Ä¢ ‚è±Ô∏è {concert['duration']} ‚Ä¢ üé≠ {concert['genre']}\n"
                    
                    if concert['concert_data'].get('transition_info'):
                        transition = concert['concert_data']['transition_info']
                        if transition.get('status') == 'success':
                            concerts_text += f"üö∂üèº‚Äç‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–π –∑–∞–ª: ~{transition.get('walk_time', 0)} –º–∏–Ω ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                        elif transition.get('status') == 'same_hall':
                            concerts_text += f"üìç –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –∑–∞–ª–µ ‚Ä¢ {transition.get('time_between', 0)} –º–∏–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n"
                    
                    concerts_text += "\n"
                else:
                    concerts_text += f"{concert['time']} ‚Ä¢ {concert['index']}. {concert['name']}\n"
            
            concerts_text += "\n"
        
        return concerts_text.strip()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"

def format_route_summary(concerts_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        route_summary = concerts_data.get("route_summary", {})
        if not route_summary:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        summary_text = "üìä *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞:*\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        summary_text += f"üéµ *–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {route_summary.get('total_concerts', 0)}\n"
        summary_text += f"üìÖ *–î–Ω–µ–π:* {route_summary.get('total_days', 0)}\n"
        summary_text += f"üèõÔ∏è *–ó–∞–ª–æ–≤:* {route_summary.get('total_halls', 0)}\n"
        summary_text += f"üé® *–ñ–∞–Ω—Ä–æ–≤:* {route_summary.get('total_genres', 0)}\n"
        
        # –í—Ä–µ–º—è
        concert_time = route_summary.get('total_concert_time_minutes', 0)
        if concert_time:
            summary_text += f"‚è±Ô∏è *–í—Ä–µ–º—è –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤:* {concert_time} –º–∏–Ω\n"
        
        trans_time = route_summary.get('total_walk_time_minutes', 0)
        if trans_time:
            summary_text += f"üö∂ *–í—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:* {trans_time} –º–∏–Ω\n"
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance = route_summary.get('total_distance_km', 0)
        if distance:
            summary_text += f"üìç *–ü—Ä–æ–π–¥–µ–Ω–æ:* {distance} –∫–º\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        compositions = route_summary.get('unique_compositions', 0)
        if compositions:
            summary_text += f"üéº *–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:* {compositions}\n"
        
        authors = route_summary.get('unique_authors', 0)
        if authors:
            summary_text += f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä–æ–≤:* {authors}\n"
        
        artists = route_summary.get('unique_artists', 0)
        if artists:
            summary_text += f"üé≠ *–ê—Ä—Ç–∏—Å—Ç–æ–≤:* {artists}\n"
        
        summary_text += "\nüéâ *–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Ñ–µ—Å—Ç–∏–≤–∞–ª—å! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö!*"
        
        return summary_text
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await message.reply(
                f"""–ü—Ä–∏–≤–µ—Ç, {user.name or '–¥—Ä—É–≥'}! üëã \n\n
–Ø *Figaro* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ _¬´–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ¬ª_. 
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –±—É–¥–µ—Ç –∫–∞–∫ –Ω–∞ –ª–∞–¥–æ–Ω–∏: –º–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏, –±–∏–ª–µ—Ç—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π –∏ 
—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö.\n\n
–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
                """,
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –ø—Ä–æ—Å–∏–º –∫–æ–¥
            await message.reply(
                """–ü—Ä–∏–≤–µ—Ç! –Ø *Figaro* ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ _¬´–ë–µ–∑—É–º–Ω—ã–µ –¥–Ω–∏ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ¬ª_.\n\n
–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–∏–≤—è–∂–∏ —Å–≤–æ–π –∞–∫–∫–∞–∫–∞—É–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ:\n\n
1\. –ü–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –º–æ—ë–º —Å–∞–π—Ç–µ\n
2\. –°–∫–æ–ø–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —è —Ç–µ–±—è —É–∑–Ω–∞—é\n
3\. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                """,
                reply=False
            )

@dp.message_handler(lambda m: len(m.text.strip()) >= 10 and len(m.text.strip()) <= 50)
async def handle_link_code(message: types.Message):
    code = message.text.strip()
    with Session(simple_engine) as session:
        now = datetime.utcnow()
        link_code = session.exec(
            select(TelegramLinkCode)
            .where(TelegramLinkCode.code == code)
            .where(TelegramLinkCode.expires_at > now)
        ).first()
        if not link_code:
            await message.reply("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user = session.get(User, link_code.user_id)
        if not user:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º telegram_id –∏ username
        user.telegram_id = message.from_user.id
        if hasattr(message.from_user, 'username') and message.from_user.username:
            user.telegram_username = message.from_user.username
        else:
            user.telegram_username = None
        session.add(user)
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        session.delete(link_code)
        session.commit()
        await message.reply(
            "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –±–æ—Ç–∞.",
            reply_markup=get_main_menu_keyboard()
        )

@dp.message_handler(commands=["whoami"])
async def whoami(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply(f"–í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {user.email}\n–í–∞—à–µ –∏–º—è: {user.name or '-'}")
        else:
            await message.reply("–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

@dp.message_handler(commands=["testmsg"])
async def testmsg(message: types.Message):
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            await message.reply("‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    async def safe_edit_message(text, reply_markup=None, parse_mode=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await bot.edit_message_text(
                text,
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                pass
            elif "Can't parse entities" in str(e) and parse_mode == 'Markdown':
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Markdown, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                try:
                    await bot.edit_message_text(
                        text,
                        callback_query.from_user.id,
                        callback_query.message.message_id,
                        reply_markup=reply_markup,
                        parse_mode=None
                    )
                except Exception as e2:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        callback_query.from_user.id,
                        text,
                        reply_markup=reply_markup,
                        parse_mode=None
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                await bot.send_message(
                    callback_query.from_user.id,
                    text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
    
    with Session(simple_engine) as session:
        user = session.exec(select(User).where(User.telegram_id == callback_query.from_user.id)).first()
        if not user:
            await bot.send_message(callback_query.from_user.id, "‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")
            return
        
        action = callback_query.data
        
        if action == "main_menu":
            await safe_edit_message(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action == "my_route":
            await safe_edit_message(
                """üéµ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞:\n\n
‚Ä¢ *–ö—Ä–∞—Ç–∫–∏–π* ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ\n
‚Ä¢ *–ü–æ–ª–Ω—ã–π* ‚Äî —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
                """,
                reply_markup=get_route_menu_keyboard()
            )
        
        elif action == "route_menu":
            await safe_edit_message(
                """üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞:\n\n
‚Ä¢ *–ö—Ä–∞—Ç–∫–∏–π* ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ\n
‚Ä¢ *–ü–æ–ª–Ω—ã–π* ‚Äî —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
                """,
                reply_markup=get_route_menu_keyboard()
            )
        
        elif action == "route_brief":
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç
            await safe_edit_message("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à –º–∞—Ä—à—Ä—É—Ç...")
            try:
                result = await api_client.get_route_data(callback_query.from_user.id)
                if "error" in result:
                    await safe_edit_message(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", reply_markup=get_route_menu_keyboard())
                else:
                    route_data = result.get("route_data", {})
                    formatted_route = format_route_concerts_list(route_data, detailed=False)
                    await safe_edit_message(f"üéµ *–í–∞—à –∫—Ä–∞—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç:*\n\n{formatted_route}", 
                                          reply_markup=get_route_menu_keyboard(), parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
                await safe_edit_message("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_route_menu_keyboard())
        
        elif action == "route_detailed":
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç
            await safe_edit_message("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç...")
            try:
                result = await api_client.get_route_data(callback_query.from_user.id)
                if "error" in result:
                    await safe_edit_message(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", reply_markup=get_route_menu_keyboard())
                else:
                    route_data = result.get("route_data", {})
                    formatted_route = format_route_concerts_list(route_data, detailed=True)
                    await safe_edit_message(f"üéµ *–í–∞—à —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç:*\n\n{formatted_route}", 
                                          reply_markup=get_route_menu_keyboard(), parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
                await safe_edit_message("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_route_menu_keyboard())
        
        elif action == "route_stats":
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
            await safe_edit_message("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞...")
            try:
                result = await api_client.get_route_data(callback_query.from_user.id)
                if "error" in result:
                    await safe_edit_message(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", reply_markup=get_route_menu_keyboard())
                else:
                    route_data = result.get("route_data", {})
                    formatted_stats = format_route_summary(route_data)
                    await safe_edit_message(f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:*\n\n{formatted_stats}", 
                                          reply_markup=get_route_menu_keyboard(), parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
                await safe_edit_message("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_route_menu_keyboard())
        
        elif action == "route_day":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è
            await safe_edit_message("üìÖ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏...")
            keyboard = await get_day_selection_keyboard(callback_query.from_user.id)
            await safe_edit_message(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:",
                reply_markup=keyboard
            )
        
        elif action.startswith("day_"):
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            day_number = action.split("_")[1]
            await safe_edit_message(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å {day_number}...")
            try:
                result = await api_client.get_route_day(callback_query.from_user.id, int(day_number))
                if "error" in result:
                    keyboard = await get_day_selection_keyboard(callback_query.from_user.id)
                    await safe_edit_message(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", reply_markup=keyboard)
                else:
                    formatted_route = result.get("formatted_route", "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    keyboard = await get_day_selection_keyboard(callback_query.from_user.id)
                    await safe_edit_message(f"üìÖ *–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –¥–µ–Ω—å {day_number}:*\n\n{formatted_route}", 
                                          reply_markup=keyboard, parse_mode='Markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –¥–µ–Ω—å: {e}")
                keyboard = await get_day_selection_keyboard(callback_query.from_user.id)
                await safe_edit_message("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard)
        
        elif action == "statistics":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–∞–±–ª–æ–Ω—É
            await safe_edit_message("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
            result = await send_template_message_async(5, callback_query.from_user.id)  # ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if "error" in result:
                await safe_edit_message(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}", reply_markup=get_main_menu_keyboard())
            else:
                await safe_edit_message("‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", reply_markup=get_main_menu_keyboard())
        
        elif action == "profile":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
            profile_text += f"üìß Email: {user.email}\n"
            profile_text += f"üë§ –ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"üÜî ID: {user.id}\n"
            if user.telegram_username:
                profile_text += f"üì± Telegram: @{user.telegram_username}\n"
            
            await safe_edit_message(
                profile_text,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif action == "help":
            help_text = "*–ß—Ç–æ –µ—Å—Ç—å —á—Ç–æ‚ùì:*\n\n"
            help_text += "üó∫Ô∏è *–ú–æ–π –º–∞—Ä—à—Ä—É—Ç* ‚Äî –≤—Å–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: –∫—Ä–∞—Ç–∫–æ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ, –∏–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ\n\n"
            help_text += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* ‚Äî –≤–∞—à –º–∞—Ä—à—Ä—É—Ç –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ –ª—é–±–æ–ø—ã—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–∞—Ö\n\n"
            help_text += "üéº *–ö–æ–Ω—Ü–µ—Ä—Ç—ã —Å–µ–≥–æ–¥–Ω—è* ‚Äî –º–∞—Ä—à—Ä—É—Ç —ç—Ç–æ–≥–æ –¥–Ω—è\n\n"
            help_text += "üèõÔ∏è *–ó–∞–ª—ã* ‚Äî –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏ –∫–∞–∫ –∏—Ö –Ω–∞–π—Ç–∏\n\n"
            help_text += "üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –í—ã —ç—Ç–æ –í—ã\n\n"
            help_text += "üîó *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç* ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±\-–≤–µ—Ä—Å–∏—é\n\n"
            help_text += "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞\."
            
            await safe_edit_message(
                help_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )
        
        elif action == "web_profile":
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            web_url = SITE_LINK + "/profile"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            safe_url = web_url.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('-', '\\-')
            print(f"Debug: Original URL: {web_url}")
            print(f"Debug: Safe URL: {safe_url}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å Markdown
            try:
                await safe_edit_message(
                    f"""üîó *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n
–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–æ–±–Ω–µ–µ –≤ –≤–µ–±\-–≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞:
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

[–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç]({safe_url})
                    """,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                print(f"Markdown failed, trying HTML: {e}")
                # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º HTML
                await safe_edit_message(
                    f"""üîó <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n
–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–æ–±–Ω–µ–µ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–∏—Å–∞:
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<a href="{web_url}">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
                    """,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode='HTML'
                )
        
        elif action in ["today_concerts", "halls", "genres"]:
            # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            await safe_edit_message(
                "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )

if __name__ == "__main__":
    import asyncio
    import time
    
    while True:
        try:
            print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            executor.start_polling(dp, skip_updates=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30) 