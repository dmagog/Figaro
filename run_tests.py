#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Figaro Bot API
"""

import sys
import subprocess
import argparse
import os
from pathlib import Path

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Figaro Bot API")
    parser.add_argument(
        "--type", 
        choices=["all", "auth", "user", "purchase", "home", "tickets"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--coverage", 
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
    )
    parser.add_argument(
        "--verbose", 
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--parallel", 
        action="store_true",
        help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"
    )
    parser.add_argument(
        "--install-deps", 
        action="store_true",
        help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("app").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.install_deps:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
        if not run_command("pip install -r tests/requirements-test.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
            sys.exit(1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É pytest
    pytest_cmd = ["pytest"]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç—ã
    if args.type == "all":
        pytest_cmd.append("tests/")
    else:
        pytest_cmd.append(f"tests/test_{args.type}.py")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
    if args.verbose:
        pytest_cmd.append("-v")
    
    if args.coverage:
        pytest_cmd.append("--cov=app")
        pytest_cmd.append("--cov-report=html")
        pytest_cmd.append("--cov-report=term-missing")
    
    if args.parallel:
        pytest_cmd.append("-n")
        pytest_cmd.append("auto")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    command = " ".join(pytest_cmd)
    
    print(f"\nüéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–∏–ø–∞: {args.type}")
    if args.coverage:
        print("üìä –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    if args.verbose:
        print("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    if args.parallel:
        print("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    
    success = run_command(command, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤")
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        if args.coverage:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)

if __name__ == "__main__":
    main() 